ObjC:
- ObjC: Public static fields
- ObjC: support include dependencies for type parameters, support for dipendencies for covariant return types.
Suggested solution: create a correct tree of dependencies and print base types without any methods (just fields and base types?) in order in "OCTypes.h"

General
- Support optional parameters constructors
- Add better support for detecting main partial declarations in some way

=============================================

- Wrap SyntaxTree, SemanticModel, Compilation to agnostic classes???
- Better Support RequiresAttribute;
- Better symbol replacement framework. Support to replace method generic calls, property/indexer usages. Better Support If the calls are "ABI" compatible
(mening for example the method call has same number/types of parameters) or a total replacement of the call with something else is needed.
Example, calling a method instead of a field
- Check to not allow Explicit Interface Implementation;

Internals JNI:
- Add AJ2N e AN2J, do like box types (stop using template specialization)

Possible support:
- Box for enums on non native methods (look getJavaType() in JavaExtensions_Types.cs)
- structs:
  blittable structs with simple types [StructLayout(LayoutKind.Sequential)] can be supported
  by annotating Fields with getter/setter C methods
  and generating JNI code
- yield;
- delegates;
- by ref:

public class ByRef
{
    static <T> ByRef<T> Create(T value)
    {
        return new ByRef<T>(value);
    }

    static <T> ByRef<T> Create()
    {
        return new ByRef<T>();
    }
}

public class ByRef<T> : ByRef
{
    public T value;

    ByRef<T>() { }

    ByRef<T>(T value)
    {
        this.value = value;
    }
}